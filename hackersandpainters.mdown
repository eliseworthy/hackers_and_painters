Hackers and Painters
====================

Questions:
----------  

1. Summarize the chapter (1+ bullets)
2. What was one idea the surprised or stood out to you? Why? (2-4 sentences)
3. What was a question that you saw as unanswered? (1-2 sentences)
4. Did you have any objections or disagreements? (1-2 sentences)
5. What were your key take aways or things you want to remember? (1+ bullets)  

1
-

1.  
US public schools are holding pens for adolesents that breed boredom and cruelty.  
Nerds aren't popular because they have better things to do.  

2. 
The idea that high school students have an elaborate caste system is surprising. The author seemed to think that popularity was both caused by being complacent and by actively working toward being popular. These conflicting ideas weren't resolved.

3. 
The author made broad claims about high school students' caste systems, popular students' disinterest in learning, the lack of involvement by adults in adolelecents' lives, and the uselessness of high school. Do other types of learning environments exist? He never tries to disprove his own personal experience.

4. 
His idea that student popularity is caused by caring more about popularity than about other things, and that popularity is based on a certain set of criteria, seems flawed. Thankfully, my high school experience was awesome. I felt neither popular nor unpopular and the adults in my life were actively engaged in seeing me succeed, academically and beyond.

5. 
Some nerds were bullied heavily in school and didn't find productive things to do. 

2
-

1.
Hackers are more like painters (makers) than engineers (implementers).
There is nuance and art to writing software.

2. 
The author said to "...fight design wars in new markets," after explaining why large companies create bad software. This is surprising. It seems as if there's a tremendous amount to be gained by creating beautiful software that replaces existing crappy software written by large teams.

3. 
Why is knowing theory irrelevant? I understand that practice and application are extremely important to writing code, but it seems that knowing how systems are implemented to be efficient, and knowing about coding practices, is also valuable.

4. 
The author said that contribution to open source was paramount in hiring - that it proved that candidates loved their craft. I've heard arguments against this, particularly related to diversity and championing women who care for families and take on a larger number of domestic duties than men. I think contribution to open source is not the primary identifier of love of software and that idea should be revamped.

5. 
Hackers start original, and get good, while scientists start good and get original. 
Hacking, like painting, is done through gradual refinement. 
Empathy for the user is crucial in creating great software. 


